#!groovy
//building docker image
properties([
    disableConcurrentBuilds(),
    parameters([
    	string(defaultValue: '0', description: 'Enter port number from image tag', name: 'PORT', trim: false),
        string(defaultValue: 'gw', description: 'Enter Name for task definition', name: 'NTASK', trim: false),
		string(defaultValue: 'none', description: 'Enter image URI from ECR', name: 'IMAGE', trim: false),
    ])
])

pipeline {
    
    environment {
        RNAME = "${sh(script:'aws ecr describe-repositories | jq .repositories[0].repositoryName', returnStdout: true).trim()}"
    }
    
    agent {
        label 'master'
    }
    options {
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    timestamps()
    }
    stages {
        stage("define vars") {
            steps {
              
                echo "${params.PORT}"
                echo "${params.IMAGE}"
				
             }
        }
        
                
        stage("Create template for task definition") {
            steps {
                echo "Repository Name is ${env.RNAME}"
                script {
                    dir ('ECS_template') {
					    sh "chmod +x temp_gen"
                        sh "./temp_gen ${params.NTASK} ${params.IMAGE} ${params.PORT} > template.json"
                        sh "ls -la"
                        sh "cat template.json"
                    }
                }
            }
        }
        
        stage("Create task definition") {
            steps {
                echo "======= create task definition======="
                dir (ECS_template) {
                    sh "aws ecs register-task-definition --cli-input-json file://template.json"
                }
                sh "aws ecs list-task-definitions"
            }
        }
        
        stage("Run task in cluster as task") {
            steps {
                echo "======= Run task in cluster as task ======="
                sh "aws ecs run-task --cluster Graduation_work --task-definition ${params.NTASK} --launch-type EC2 --count 1"
            }
        }
        
        
    }
}
